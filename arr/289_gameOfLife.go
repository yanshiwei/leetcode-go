func gameOfLife(board [][]int)  {
    /*
    1 代表细胞活的， 0 代表细胞死的，那么这个位置就四种状态，用【下一个状态，当前状态】表示，
    状态分析：
    状态 0： 00，死的，下一轮还是死的
    状态 1： 01，活的，下一轮死了
    状态 2： 10，死的，下一轮活了
    状态 3： 11，活的，下一轮继续活着
    如此表示的话，最后只需要用右移操作更新结果即能保证board任何一个值仍然是0 或者 1
    2 下一轮活的可能有两种情况，也就是要把单元格变为 1,其余情况都会死亡
        2.1 这个活细胞周围八个位置有两个或三个活细胞，下一轮继续活，属于 11
        2.2 这个细胞本来死的，周围有三个活着的，下一轮复活了，属于 10
    其他的下一轮死亡情况：
        当前是活的，周围活细胞少与2个，属于01，不用更新，向右移动自动更新；
        当前是说的，周围活细胞超过3个，属于01，不用更新，向右移动自动更新；
    3 故只需要关系下一轮活得即可。遍历下每个格子看他周围细胞有多少个活细胞就行了，然后更改为状态
    */
    var m=len(board)
    if m<1 {
        return
    }
    var n=len(board[0])
    if n<1 {
        return
    }
    //遍历
    for i:=0;i<m;i++ {
        for j:=0;j<n;j++ {
            //// 拿到当前位置周围活细胞数量
            cnt:=countEightDirection(board,i,j,m,n)
            if board[i][j]==1&&(cnt==2||cnt==3){
                //活细胞周围八个位置有两个或三个活细胞，下一轮继续活 
                board[i][j]=3
            }
            if board[i][j]==0&&cnt==3{
                //死细胞周围有三个活细胞，下一轮复活
                board[i][j]=2
            }
        }
    }
    //更新最状态为0 或者 1
    for i:=0;i<m;i++ {
        for j:=0;j<n;j++ {
            board[i][j]>>=1
        }
    }
}
var dx=[]int{0,0,-1,1,1,-1,1,-1}//上下左右,东北，西南，东南，西北
var dy=[]int{-1,1,0,0,-1,1,1,-1}
func countEightDirection(board [][]int,x, y,m,n int)int {
    var cnt int
    for i:=0;i<8;i++ {
        nx:=x+dx[i]
        ny:=y+dy[i]
        if nx<0||nx>=m||ny<0||ny>=n {
            continue//超过边界
        }
        //如果该位置为0，当前轮是死的，不用考虑
        //如果该位置为1，当前轮是活得，算进去
        //如果该位置为2，即01状态，表示当前轮是死的，下一轮才是活，不需要算进去
        //度过该位置为3，即11状态，表示当前轮是活得，下一轮是活得，算尽
        cnt+=(board[nx][ny]&1)
    }
    return cnt
}
