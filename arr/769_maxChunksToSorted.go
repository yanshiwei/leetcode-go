func maxChunksToSorted(arr []int) int {
    /*
    数组特点是[0, 1, ..., arr.length - 1]的一种排列，如果下标==当前最大值max，则从0到该下标值max出是0-max的一种排练，可以分块
    首先找到从左块开始最小块的大小。如果前 k 个元素为 [0, 1, ..., k-1]，可以直接把他们分为一个块。当我们需要检查 [0, 1, ..., n-1] 中前 k+1 个元素是不是 [0, 1, ..., k] 的时候，只需要检查其中最大的数是不是 k 
    示例
1，0，3，2，5，4
对上面这个数组分块时，第一个数字是1，向后遍历是0，已经包含所有的小于1的数，可以分块；接着遍历到3，更新最大值，向后遍历是2，再次满足包含所有小于3的数，可以分块；接着遍历5，更新最大值，向后遍历是4，再次满足包含所有小于5的数，可以分块
一共分了三块
0，1，2，3，4
对上面这个数组分块时，第一个数是0，可以自己分一块；第二个数是1，也可以自己分一块，...，最后一个数是4，也可以自己分一块
1，0，2，3，4
对上面这个数组分块时，第一个数是1，向后遍历是0，可以分一块；接着遍历2，可以分一块；接着遍历3，可以分一块；接着遍历4，可以分一块
    */
    var res int
    if len(arr)<1 {
        return res
    }
    var maxV=INTMIN
    for i:=range arr {
        if maxV<arr[i]{
            maxV=arr[i]
        }
        if maxV==i {
            res+=1
        }
    }
    return res
}
const INTMAX=int(^uint(0)>>1)
const INTMIN=^INTMAX
