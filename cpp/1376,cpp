class Solution {
    /*
    题目：
    公司里有 n 名员工，每个员工的 ID 都是独一无二的，编号从 0 到 n - 1。公司的总负责人通过 headID 进行标识。
在 manager 数组中，每个员工都有一个直属负责人，其中 manager[i] 是第 i 名员工的直属负责人。对于总负责人，manager[headID] = -1。题目保证从属关系可以用树结构显示。
公司总负责人想要向公司所有员工通告一条紧急消息。他将会首先通知他的直属下属们，然后由这些下属通知他们的下属，直到所有的员工都得知这条紧急消息。
第 i 名员工需要 informTime[i] 分钟来通知它的所有直属下属（也就是说在 informTime[i] 分钟后，他的所有直属下属都可以开始传播这一消息）。
返回通知所有员工这一紧急消息所需要的 分钟数 。
题解：
    https://leetcode.cn/problems/time-needed-to-inform-all-employees/solutions/988614/bfsdfshui-su-fa-jian-tu-shi-xian-lei-si-qse54/
    */
public:
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
        // 构造树
        unordered_map<int,vector<int>>graph;
        // init，每个员工可能都存在下属
        for(int i=0;i<manager.size();i++){
            graph[i]={};
        }
        // init, 寻找真实的下属
        for(int i=0;i<manager.size();i++){
            if(manager[i]!=-1){
                graph[manager[i]].push_back(i);
            }
        }
        //通知所有员工这一紧急消息所需要的 分钟数,其实就是求，从根节点到子节点的所有路径的和的最大值
        queue<pair<int,int>>qu;
        qu.push(make_pair(headID,informTime[headID]));
        int res=0;
        while(!qu.empty()){
            int size=qu.size();
            for(int i=0;i<size;i++){
                auto pair=qu.front();
                qu.pop();
                int nowGead=pair.first;
                int step=pair.second;
                res=max(res,step);
                // 类似二叉树便利，只不过这里是通过graph
                int nextSize=graph[nowGead].size();
                for(int j=0;j<nextSize;j++){
                    int idx=graph[nowGead][j];
                    qu.push(make_pair(idx,step+informTime[idx]));
                }
            }
        }
        return res;
    }
};
