class Solution {
    /*
    题目：
    一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。
给你石子的位置列表 stones（用单元格序号 升序 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃 1 个单位（即只能从单元格 1 跳至单元格 2 ）。
如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。
    题解：
    首先明确，下一步可以由三种状态转换而来
    上一个石头到当前位置的距离为 k
    上一个石头到当前位置的距离为 k+1
    上一个石头到当前位置的距离为 k-1
    这个时候就可以回头去考虑在上一个石头的状态也是如此，故可以用DP
    创建一个动规数组dp[i][k]，表示从上一步跳k个单元到达上个石头后能否从上个石头到第i个石头（i=0开始）
    初始化：
    dp[0][0]在第一个石头无需跳，必在故true
    对于第i个石头，从上一步跳k个单元到达上个石头j后能否到达第i个石头
    dp[i][k] = dp[j][k - 1] || dp[j][k] || dp[j][k + 1]
    注意0<=j<i,只要其中存在一个，那么就说明能用上一个石子跳到当前石子
    现在关键是确认k,设k=stones[i]-stones[j]，也就是说从j到i肯定可以跳到，那接下来就关键看上上个石头能否k/k-1/k+1跳到j，只要跳到
    就说明j->i也能完成。
    */
public:
    bool canCross(vector<int>& stones) {
        if(stones.size()<1){
            return false;
        }
        int n=stones.size();
        vector<vector<bool>>dp(n,vector<bool>(n,false));
        dp[0][0]=true;//第一个石头无需跳，必在故true
        for(int i=1;i<n;i++){
            // 如果相邻两个石头i与i-1 之间的距离比第i-1号石头的最大跳跃范围i还要大
            // 那么下标i之前的任何石头都不可能可以跳到下标i及其之后石头
            if(stones[i]-stones[i-1]>i){
                return false;
            }
            for(int j=i-1;j>=0;j--){
                int k=stones[i]-stones[j];
                if(k>j+1){
                    // 类似的
                    break;
                }
                dp[i][k] = (dp[j][k-1] || dp[j][k]) || dp[j][k+1];
                // 到了数组最末尾的时候，进行一个判断，判断是否能跳到最后一个石子
                if (i == n - 1 && dp[i][k]) {
                    return true;
                }
            }
        }
        return  false;
    }
};
